import XMonad

import Data.Monoid
import System.Exit
import XMonad.Prompt
import XMonad.Prompt.RunOrRaise
import XMonad.Prompt.Shell
import XMonad.Prompt.Window
import XMonad.Prompt.XMonad
import XMonad.Prompt.AppLauncher

import XMonad.Hooks.DynamicLog
import XMonad.Hooks.SetWMName 
import XMonad.Hooks.ManageHelpers
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.UrgencyHook
import XMonad.Hooks.FadeInactive
import XMonad.Hooks.EwmhDesktops

import XMonad.Layout
import XMonad.Layout.Accordion
import XMonad.Layout.Grid
import XMonad.Layout.IM
import XMonad.Layout.NoBorders
import XMonad.Layout.PerWorkspace
import XMonad.Layout.Reflect
import XMonad.Layout.SimpleFloat
import XMonad.Layout.Tabbed
import XMonad.Layout.NoBorders

import XMonad.Util.Run
import XMonad.Util.EZConfig
import XMonad.Util.XSelection
import XMonad.Util.WorkspaceCompare
import XMonad.Util.WindowProperties
import XMonad.Util.NamedWindows (getName)

import XMonad.Actions.SinkAll
import XMonad.Actions.CycleWS
import XMonad.Actions.NoBorders
import XMonad.Actions.GridSelect
import Data.List(isPrefixOf)
import Data.Ratio ((%))
import qualified System.IO.UTF8 as U
import qualified XMonad.StackSet as W
import qualified XMonad.Actions.FlexibleResize as Flex
import qualified Data.Map        as M

myBorderWidth   = 0
myNormalBorderColor  = "#729fcf"
myFocusedBorderColor = "#7292cf"


myFont               = "xft:Droid Serif:pixelsize=9"
-- dzen settings:
dzFont             = "Droid Serif-9:Bold"
--dzFont             = "OpenLogos-8"
dzBgColor          = "#000000"
dzFgColor          = "#F6F1DB"

--
myKeys conf@(XConfig {XMonad.modMask = modm}) = M.fromList $
    [ ((modm .|. shiftMask, xK_Return), spawn $ XMonad.terminal conf)
    , ((modm,               xK_r     ), spawn "exe=`dmenu_path | yeganesh -- -fn Monaco-12` && eval \"exec $exe\"")
    , ((modm .|. shiftMask, xK_r     ), spawn "gmrun")
    , ((modm .|. shiftMask, xK_c     ), kill)
    , ((controlMask,        xK_Print ), spawn "sleep 0.2; scrot -s")
    , ((0 ,                 xK_Print ), spawn "scrot")
    , ((0 ,                0x1008ff11), spawn "amixer set Master 5%- ")
    , ((0 ,                0x1008ff13), spawn "amixer set Master 5%+ ")
--    , ((0 ,                0x1008ff11), spawn "ossmix vmix0-outvol -- -1")
--    , ((0 ,                0x1008ff13), spawn "ossmix vmix0-outvol -- +1")
    , ((0 ,                0x1008ff2f), spawn "gksudo pm-suspend")
    , ((0 ,                0x1008ff93), spawn "gksudo pm-hibernate")
    , ((modm,               xK_space ), sendMessage NextLayout)
    , ((modm .|. shiftMask, xK_space ), setLayout $ XMonad.layoutHook conf)
    , ((modm,               xK_n     ), refresh)
    , ((modm,               xK_b     ), sendMessage ToggleStruts)
    , ((modm,               xK_Tab   ), windows W.focusDown)
    , ((modm,               xK_j     ), windows W.focusDown)
    , ((modm,               xK_k     ), windows W.focusUp  )
    , ((modm,               xK_m     ), windows W.focusMaster  )
    , ((modm,               xK_Return), windows W.swapMaster)
    , ((modm .|. shiftMask, xK_j     ), windows W.swapDown  )
    , ((modm .|. shiftMask, xK_k     ), windows W.swapUp    )
    , ((modm,               xK_h     ), sendMessage Shrink)
    , ((modm,               xK_l     ), sendMessage Expand)
    , ((modm,               xK_t     ), withFocused $ windows . W.sink)
    , ((modm              , xK_comma ), sendMessage (IncMasterN 1))
    , ((modm              , xK_period), sendMessage (IncMasterN (-1)))
    , ((modm .|. shiftMask, xK_q     ), io (exitWith ExitSuccess))
    , ((modm .|. shiftMask, xK_r     ), spawn "xmonad --recompile; xmonad --restart")
    ]
    ++
    [((m .|. modm, k), windows $ f i)
        | (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_7]
        , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
    ++
    [((m .|. modm, key), screenWorkspace sc >>= flip whenJust (windows . f))
        | (key, sc) <- zip [xK_w, xK_e, xK_p] [0..]
        , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]
myMouseBindings (XConfig {XMonad.modMask = modm}) = M.fromList $
    [ ((modm, button1), (\w -> focus w >> mouseMoveWindow w
                                       >> windows W.shiftMaster))
    , ((modm, button2), (\w -> focus w >> windows W.shiftMaster))
    , ((modm, button3), (\w -> focus w >> mouseResizeWindow w
                                       >> windows W.shiftMaster))
    ]


myManageHook = composeAll . concat $
    [ [isFullscreen --> doFullFloat, isDialog --> doCenterFloat]
    , [className =? c  --> doFloat  | c <- myFloats]
    , [title     =? t  --> doFloat  | t <- myTitleFloats]
    , [resource  =? r  --> doIgnore | r <- myIgnores]
--    , [className =? s  --> doTile   | s <- myTiles]
    ]
    where
    myFloats      = ["Gpick", "Chromium", "Gimp", "Volumeicon", "MPlayer", "Umplayer", "Gnome-mplayer", "Tintwizard", "Pcmanfm", "Vlc", "Lxrandr", "Arandr", "Audacious", "Deadbeef", "VirtualBox", "Firefox", "Firefox-bin", "Linux-fetion", "Gcalctool", "Gmlive", "Skype", "Ossxmix", "Pidgin", "Emesene", "Openfetion", "Vncviewer", "Cairo-dock" ]
    myTitleFloats = ["Downloads", "Preferences", "Save As...", "QEMU", "emacs", "Add-ons", "Firefox", "Chromium", "Exe", "Options", "首选项", "Wicd Network Manager"]
    myIgnores     = ["trayer", "dzen", "stalonetray", "systray", "cairo-dock"]
--    myTiles       = ["tilda", "pcmanfm", "thunar", "dolphin", "lxterminal"]

myStatusBar :: String
myStatusBar = "dzen2  -fg '" ++ dzFgColor ++ "' -bg '" ++ dzBgColor ++ "' -e 'button3=' -h '16'  -ta l"
myConkyBar :: String
--myConkyBar = "conky | dzen2 -fg '" ++ dzFgColor ++ "' -bg '" ++ dzBgColor ++ "' -x '700' -h '20' -fn '" ++ dzFont ++ "' -sa c -ta r"
myConkyBar = "sleep 1; conky | dzen2 -e '' -h '16' -x '800' -ta r -fg '" ++ dzFgColor ++ "' -bg '" ++dzBgColor  ++ "'"
--mySysTray :: String
--mySysTray = "sleep 3; trayer --expand true  --alpha 0 --edge top --align right --SetDockType true --transparent flase --SetPartialStrut true --widthtype request --tint 0xffffff --height 18 --margin 65"

myLogHook h = dynamicLogWithPP $ defaultPP
      { ppCurrent     = dzenColor "white" "#326496" . pad
        , ppVisible     = dzenColor "white" "#000000" . pad 
        , ppHidden      = dzenColor "#1793D1"  "#000000" . pad 
        , ppHiddenNoWindows = dzenColor "white" "#000000" . pad 
        , ppUrgent      = dzenColor "#2e3436" "#fce94f" . pad 
        , ppWsSep    = ""
        , ppSep      = "|"
        , ppLayout   = dzenColor "skyblue" "black" .
                          (\ x -> case x of
                              "Tall"                   -> "^i(/home/zhou/.xmonad/dzen/layouts/tile.xpm)"
                              "Mirror Tall"            -> "^i(/home/zhou/.xmonad/dzen/layouts/tilebottom.xpm)"
                              "Full"                   -> "^i(/home/zhou/.xmonad/dzen/layouts/fullscreen.xpm)"
                              "Grid"                   -> "^i(/home/zhou/.xmonad/dzen/layouts/fairv.xpm)"
                              "Spiral"                 -> "(@)"
                              "Accordion"              -> "Acc"
                              "Tabbed Simplest"        -> "Tab"
                              "Tabbed Bottom Simplest" -> "TaB"
                              "Simple Float"           -> "^i(/home/zhou/.xmonad/dzen/layouts/floating.xpm)"
                              "IM"                     -> "IM "
                              "Dishes 2 (1%6)"         -> "Dsh"
                              _                        -> pad x
                          )
        , ppTitle    = (" " ++) . dzenColor "white" "#000000" . dzenEscape
        , ppOutput   = hPutStrLn h
      }

--
-- Layouts
genericLayout = tiled
            ||| Mirror tiled ||| Full ||| Grid ||| Accordion ||| simpleFloat
--            ||| imLayout
--            ||| titled
  where
     -- default tiling algorithm partitions the screen into two panes
     tiled = Tall nmaster delta ratio
     -- The default number of windows in the master pane
     nmaster = 1
     -- Default proportion of screen occupied by master pane
     ratio = 1/2
     -- Percent of screen to increment by when resizing panes
     delta = 3/100
myLayout =  genericLayout

main :: IO ()
main = do
  spawn "wicd-client"
  spawn "parcellite"
  spawn "volumeicon"
  spawn "tint2"
  spawn "urxvt"
  spawn "fcitx"
  dzen <- spawnPipe myStatusBar
  spawn myConkyBar
--  spawn mySysTray
--  spawn "xcompmgr"

  xmonad $ ewmh defaultConfig {
         modMask = mod4Mask
       , focusFollowsMouse  = True
       , borderWidth = myBorderWidth
       , terminal = "urxvt"
       , manageHook = manageDocks <+> manageHook defaultConfig <+> myManageHook
       , logHook    = myLogHook dzen >> fadeInactiveLogHook 0xdddddddd
--       , logHook = ewmhDesktopsLogHook >> (dynamicLogWithPP $ myLogHook dzen)
--       , layoutHook = ewmhDesktopsEventHook $ avoidStruts $ myLayout
       , layoutHook = avoidStruts $ myLayout
       , workspaces = ["^ca(1,xdotool key super+1)^fn(OpenLogos-12)Q^fn(Waltograph UI-8:bold)TRANSTONE^ca()","^ca(1,xdotool key super+2)^fn(OpenLogos-12)I^ca()","^ca(1,xdotool key super+3)^fn(OpenLogos-12)U^ca()","^ca(1,xdotool key super+4)^fn(OpenLogos-12)T^ca()","^ca(1,xdotool key super+5)^fn(OpenLogos-14)R^ca()","^ca(1,xdotool key super+6)^fn(OpenLogos-12)J^ca()","^ca(1,xdotool key super+7)^fn(OpenLogos-12)P^ca()^fn(方正剪纸繁体-8)"]
      -- key bindings
       , keys               = myKeys
       , mouseBindings      = myMouseBindings
--       , handleEventHook = handleEventHook conf `mappend` fullscreenEventHook
       }

